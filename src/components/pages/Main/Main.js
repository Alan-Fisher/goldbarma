import React, { useState, useRef } from 'react'

import { MainStyle, FinalZoneStyle, HiddenFileInputsStyle, FooterStyle } from './MainStyle'
import { request } from '../../../models/ApiModel/ApiModel'
import {
  Loading, Button, Text, Space, PhoneInput,
} from '../../atoms'
import loadImage from 'blueimp-load-image'
import { getPhoneNumberPart } from '../../../common/helpers'

// TODO//
// 1. –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–∫–Ω—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –±—ã—Å—Ç—Ä–æ —Ç–µ—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ
// 2. –ü—Ä–∞–≤–∫–∞ —Ç–æ–≥–æ —á—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å –∞–π—Ñ–æ–Ω–∞ –ª–æ–º–∞—é—Ç —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
// 3. –î–∏–∑–∏–∫ :)
// 4. ...
// 5. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞—Å–ø–∏
// 6. –û—á–∏—â–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
// 7. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∏–Ω–ø—É—Ç–µ –≥–¥–µ –∫–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ ‚Äî —è—á–µ–π–∫–∞
// 8. –í—ã—á–ª–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –¥–ª–∏–Ω–µ –∏ (?) —Ñ–æ—Ä–º–∞—Ç—É
// 9. –û—Ç—Ä–µ–∑–∞—Ç—å –ª–∏—à–Ω–µ–µ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–ª–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ 747, 707 –∏ —Ç–ø
// 10. –°–æ—Ö—Ä–∞–Ω—è—Ç—å-—Ç–∞–∫–∏ –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤?
// 11. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
// 12. –°–º—è–≥—á–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ –¥–ª–∏–Ω–µ –Ω–æ–º–µ—Ä–∞ —á—Ç–æ–±—ã –≥–ª–∞–∑–∞ –Ω–µ –±—Ä–æ—Å–∞–ª–∏—Å—å –µ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏?
// 13. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –¥–≤–∞ –Ω–æ–º–µ—Ä–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (?)
// 14. –ü–æ–ø—Ä–∞–≤–∏—Ç—å regex —á—Ç–æ–±—ã –Ω–æ—Ä–º —Å—á–∏—Ç—ã–≤–∞–ª–æ –∏ "regex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.png"

const Main = () => {
  const [number, setNumber] = useState()
  const [numbers, setNumbers] = useState(
    //   [
    //   '7026823477',
    //   '7026823477',
    //   '7026823477',
    // ]
  )
  const [warning, setWarning] = useState()
  const [parsedText, setParsedText] = useState()
  const [isUploading, setUploading] = useState()
  const cameraInputRef = useRef()
  const galleryInputRef = useRef()

  const getParsedNumber = (target) => {
    setNumbers() // TODO: move to clear()
    setParsedText()
    setWarning()

    const photo = target.files[0]

    loadImage(photo, { maxWidth: 1200, maxHeight: 1200, canvas: true, orientation: true, meta: false })
      .then(({ image }) => {
        const compressedImage = image.toDataURL('image/jpeg', 0.7)
        requestTextDetection(compressedImage)
          .then(data => {
            const { ParsedText } = data[0]
            setParsedText(ParsedText)
            parsePhoneNumbers(ParsedText)
          })
          .catch(() => setWarning('–ù–æ–º–µ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω'))
      })
  }

  const requestTextDetection = (photo) => {
    const formData = new FormData()
    formData.append('base64Image', photo) // TODO: check if it is okay to append base64
    setUploading(true)
    let longRequestWarningTimer = setTimeout(() => setWarning('–ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ'), 3000)
    let tooLongRequestWarningTimer = setTimeout(() => setWarning('–í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç'), 7000)

    return request({
      method: 'POST',
      url: 'https://api.ocr.space/parse/image',
      params: formData,
      headers: { apikey: process.env.REACT_APP_OCR_API_KEY },
    })
      .then(({ ParsedResults, ErrorMessage }) => {
        if (ErrorMessage) { // Q: is that enough to catch API problems in this case?
          return ''
        }

        return ParsedResults
      })
      .finally(() => {
        setUploading(false)
        clearTimeout(longRequestWarningTimer)
        clearTimeout(tooLongRequestWarningTimer)
        setWarning()
      })
  }

  const parsePhoneNumbers = (text) => {
    const possibleNumbers = text.match(/[0-9\s-]+$/gim) || [] // TODO (!) check others like .match(/[s\0-9]+$/gim)
    const getDigits = (string) => string.replace(/\D/g, '')
    const phoneNumbers = possibleNumbers
      .map(possibleNumber => getPhoneNumberPart(getDigits(possibleNumber)))
      .filter(possibleNumber => [8, 9, 10].includes(possibleNumber?.length))

    if (phoneNumbers.length === 0) {
      setWarning('–ù–æ–º–µ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω')
    } else {
      askUserToChooseNumber(phoneNumbers)
    }
    // } else if (phoneNumbers.length === 1) {
    //   addCopyAndGoButton(phoneNumbers[0])
    // } else if (phoneNumbers.length > 1) {
    //   askUserToChooseNumber(phoneNumbers)
    // }
  }

  // const addCopyAndGoButton = (number) => {
  //   const el = document.createElement('textarea')
  //   el.value = number
  //   document.body.appendChild(el)
  //   el.select()
  //   document.execCommand('copy')
  //   document.body.removeChild(el)

  //   setNumber(number)
  // }

  const askUserToChooseNumber = (numbersToChoose) => {
    setNumbers(numbersToChoose)
  }

  const openTranfersInApp = () => window.location.replace('https://kaspi.kz/transfers/index')

  const handleChange = (target) => {
    getParsedNumber(target)
    target.value = null // eslint-disable-line no-param-reassign
  }

  // const chooseNumber = (numberToChoose) => {
  //   setNumber(numberToChoose)
  // }

  const formatPhoneNumber = (string) => {
    const length = (10 - string.length)
    for (let i = 0; i < length; i++) {
      string += 'x'
    }

    const code = string.slice(0, 3)
    const firstPart = string.slice(3, 6)
    const secondPart = string.slice(6, 8)
    const thirdPart = string.slice(8, 10) || 'xx'

    return `+7 ${code} ${firstPart}-${secondPart}-${thirdPart}`
  }

  return (
    <MainStyle>
      {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}
      <Text size="xxl">Kaspi Gold –±–∞—Ä –º–∞? üòÄ</Text>
      <Space margin="15px">
        {isUploading
          ? <Loading />
          : (
            <>
              <Button
                outlined
                color="black"
                onClick={() => cameraInputRef.current.click()}
              >
                –°—Ñ–æ—Ç–∫–∞—Ç—å
              </Button>
              <Button
                outlined
                color="black"
                onClick={() => galleryInputRef.current.click()}
              >
                –ò–∑ –≥–∞–ª–µ—Ä–∏–∏
              </Button>
            </>
          )}
      </Space>

      <FinalZoneStyle>
        {!number && numbers?.map(numberToChoose => (
          <Button
            margin="5px 5px 15px"
            key={numberToChoose}
            color="default"
            outlined
            size="lg"
            onClick={() => { window.Clipboard.copy(numberToChoose); openTranfersInApp() }}
          // onClick={() => chooseNumber(numberToChoose)}
          >
            <div style={{ fontSize: '20px', fontFamily: 'monospace, monospace' }}>
              {formatPhoneNumber(numberToChoose)}
            </div>
          </Button>
        ))}
        {/* {number &&
          <>
            <PhoneInput phoneNumber={number} />
            <Button
              outlined
              color="black"
              id="current-id"
              onClick={() => { window.Clipboard.copy(number); openTranfersInApp() }}
            >
              –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –ö–∞—Å–ø–∏
            </Button>
          </>
        } */}
        {warning && <>
          <Text size="lg">{warning}</Text>
        </>}
        <FooterStyle>
          <Button
            color="black"
            outlined
            id="current-id"
            onClick={() => { openTranfersInApp() }}
          >
            –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ö–∞—Å–ø–∏
          </Button>
          {parsedText && (
            <Button
              size="sm"
              onClick={() => alert(parsedText)}
              outlined
              color="gray"
            >
              –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
            </Button>
          )}
        </FooterStyle>
      </FinalZoneStyle>
      <HiddenFileInputsStyle>
        <input
          ref={cameraInputRef}
          accept="image/*"
          capture="filesystem"
          type="file"
          onChange={({ target }) => handleChange(target)}
        />
        <input
          ref={galleryInputRef}
          // accept="image/*"
          type="file"
          onChange={({ target }) => handleChange(target)}
        />
      </HiddenFileInputsStyle>
    </MainStyle>
  )
}

export default Main
