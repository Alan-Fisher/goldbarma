import React, { useState, useRef } from 'react'

import { MainStyle, FinalZoneStyle, HiddenFileInputsStyle, FooterStyle } from './MainStyle'
import { request } from '../../../models/ApiModel/ApiModel'
import {
  Loading, Button, Text, Space,
} from '../../atoms'
import loadImage from 'blueimp-load-image'
import { getPhoneNumberPart } from '../../../common/helpers'
import * as Sentry from '@sentry/browser'

// TODO//
// 7. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∏–Ω–ø—É—Ç–µ –≥–¥–µ –∫–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ ‚Äî —è—á–µ–π–∫–∞
// 10. –°–æ—Ö—Ä–∞–Ω—è—Ç—å-—Ç–∞–∫–∏ –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤?
// 11. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
// 14. –ü–æ–ø—Ä–∞–≤–∏—Ç—å regex —á—Ç–æ–±—ã –Ω–æ—Ä–º —Å—á–∏—Ç—ã–≤–∞–ª–æ –∏ "regex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.png"
// 15. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å –∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∏–º—è –µ—â–µ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// 18. –ó–∞–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ª–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –Ω–∞ –¥–æ–º–∞—à–Ω–µ–º —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–ª–æ–∂—É—Ö–µ
// 19. –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Sentry (?) –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å
// 20. –ü–æ—Ç–µ—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ window.replace —á—Ç–æ–±—ã "–Ω–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–ª–æ

const Main = () => {
  const [numbers, setNumbers] = useState()
  const [warning, setWarning] = useState()
  const [parsedText, setParsedText] = useState()
  const [isUploading, setUploading] = useState()
  const cameraInputRef = useRef()
  const galleryInputRef = useRef()

  const getParsedNumber = (target) => {
    clearPrevResult()

    const photo = target.files[0]

    loadImage(photo, { maxWidth: 1200, maxHeight: 1200, canvas: true, orientation: true, meta: false })
      .then(({ image }) => {
        const compressedImage = image.toDataURL('image/jpeg', 0.7)
        requestTextDetection(compressedImage)
          .then(data => {
            const { ParsedText } = data[0]
            setParsedText(ParsedText)
            parsePhoneNumbers(ParsedText)
          })
          .catch(() => setWarning('–ù–æ–º–µ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω'))
      })
  }

  const clearPrevResult = () => {
    setNumbers()
    setParsedText()
    setWarning()
  }

  const renderWarning = () => {
    switch (warning) {
      case 'longRequest':
        return <Text>–ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ</Text>
      case 'tooLongRequest':
        return <>
          <Text>–°–∏–ª—å–Ω–æ –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ</Text>
          <Button
            size="sm"
            color="default"
            outlined
            onClick={() => window.location.reload(false)}
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </>
      case 'phoneNumberNotRecognized':
        return <>
          <Text size="lg">–ù–æ–º–µ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω</Text>
          <Button
            size="sm"
            color="gray"
            outlined
            onClick={() => reportBug()}
          >
            –ó–∞—Ä–µ–ø–æ—Ä—Ç–∏—Ç—å
          </Button>
        </>
      case 'thanksForReport':
        return <Text size="lg">–†–∞—Ö–∞! ‚ù§Ô∏è</Text> // eslint-disable-line jsx-a11y/accessible-emoji
      default:
        return null
    }
  }

  const reportBug = async () => {
    let comment = prompt('–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å')

    await Sentry.withScope(scope => {
      scope.setExtra('parsedText', parsedText)
      scope.setExtra('comment', comment)
      Sentry.captureMessage('Bug Report')
    })

    setWarning('thanksForReport')
    setTimeout(() => setWarning(), 1000)
  }

  const requestTextDetection = (photo) => {
    const formData = new FormData()
    formData.append('base64Image', photo)
    setUploading(true)
    let longRequestWarningTimer = setTimeout(() => setWarning('longRequest'), 3000)
    let tooLongRequestWarningTimer = setTimeout(() => setWarning('tooLongRequest'), 8000)

    return request({
      method: 'POST',
      url: 'https://api.ocr.space/parse/image',
      params: formData,
      headers: { apikey: process.env.REACT_APP_OCR_API_KEY },
    })
      .then(({ ParsedResults, ErrorMessage }) => {
        if (ErrorMessage) { // Q: is that enough to catch API problems in this case?
          return ''
        }

        return ParsedResults
      })
      .finally(() => {
        setUploading(false)
        clearTimeout(longRequestWarningTimer)
        clearTimeout(tooLongRequestWarningTimer)
        setWarning()
      })
  }

  const parsePhoneNumbers = (text) => {
    const possibleNumbers = text.match(/[0-9\s-]+$/gim) || [] // TODO (!) check others like .match(/[s\0-9]+$/gim)
    const getDigits = (string) => string.replace(/\D/g, '')
    const phoneNumbers = possibleNumbers
      .map(possibleNumber => getPhoneNumberPart(getDigits(possibleNumber)))
      .filter(possibleNumber => [8, 9, 10].includes(possibleNumber?.length))

    if (phoneNumbers.length === 0) {
      setWarning('phoneNumberNotRecognized')
    } else {
      askUserToChooseNumber(phoneNumbers)
    }
  }

  const askUserToChooseNumber = (numbersToChoose) => {
    setNumbers(numbersToChoose)
  }

  const openTranfersInApp = () => window.open('https://kaspi.kz/transfers', '_blank')

  const handleChange = (target) => {
    getParsedNumber(target)
    target.value = null // eslint-disable-line no-param-reassign
  }

  const formatPhoneNumber = (string) => {
    const missingDigitsLength = (10 - string.length)
    const completedNumber = string + 'x'.repeat(missingDigitsLength)

    const code = completedNumber.slice(0, 3)
    const firstPart = completedNumber.slice(3, 6)
    const secondPart = completedNumber.slice(6, 8)
    const thirdPart = completedNumber.slice(8, 10)

    return `+7 ${code} ${firstPart}-${secondPart}-${thirdPart}`
  }

  return (
    <MainStyle>
      {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}
      <Text size="xxl">Gold –±–∞—Ä –º–∞? üòÄ</Text>
      <Space margin="15px">
        {isUploading
          ? <Loading />
          : <>
            <Button
              outlined
              color="black"
              onClick={() => cameraInputRef.current.click()}
            >
              –°—Ñ–æ—Ç–∫–∞—Ç—å
            </Button>
            <Button
              outlined
              color="black"
              onClick={() => galleryInputRef.current.click()}
            >
              –ò–∑ –≥–∞–ª–µ—Ä–∏–∏
            </Button>
          </>
        }
      </Space>

      <FinalZoneStyle>
        {numbers && <Text>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∏ –æ–ø–ª–∞—Ç–∏—Ç—å:</Text>}
        {numbers?.map(numberToChoose => (
          <Button
            margin="5px 5px 15px"
            key={numberToChoose}
            color="default"
            outlined
            size="lg"
            onClick={() => { window.Clipboard.copy(numberToChoose); openTranfersInApp() }}
          >
            <div style={{ fontSize: '20px', fontFamily: 'monospace, monospace' }}>
              {formatPhoneNumber(numberToChoose)}
            </div>
          </Button>
        ))}
        {warning && renderWarning()}
        <FooterStyle>
          <Button
            color="black"
            outlined
            id="current-id"
            onClick={() => { openTranfersInApp() }}
          >
            –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
          </Button>
          {parsedText && (
            <Button
              size="sm"
              onClick={() => alert(parsedText)}
              outlined
              color="gray"
            >
              –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
            </Button>
          )}
        </FooterStyle>
      </FinalZoneStyle>
      <HiddenFileInputsStyle>
        <input
          ref={cameraInputRef}
          accept="image/*"
          capture="filesystem"
          type="file"
          onChange={({ target }) => handleChange(target)}
        />
        <input
          ref={galleryInputRef}
          type="file"
          onChange={({ target }) => handleChange(target)}
        />
      </HiddenFileInputsStyle>
    </MainStyle>
  )
}

export default Main
